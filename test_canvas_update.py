#!/usr/bin/env python3
"""
Script para probar la actualizaci√≥n autom√°tica del canvas del editor
despu√©s de cargar espacios en CarPark Project v3.0
"""
import os
import sys
import tkinter as tk
from tkinter import messagebox
import time

# Agregar el directorio src al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# Importar la GUI moderna
from src.modern_gui import ModernCarParkGUI
from src.models import ParkingSpace
import config

def test_automatic_canvas_update():
    """Prueba la actualizaci√≥n autom√°tica del canvas despu√©s de cargar espacios"""
    
    # Crear ventana principal
    root = tk.Tk()
    
    try:
        # Crear la GUI moderna
        app = ModernCarParkGUI(root)
        
        # Simular la carga de espacios despu√©s de un breve delay
        def simulate_load_spaces():
            try:
                # Crear algunos espacios de prueba
                test_spaces = [
                    ParkingSpace(id="TEST_1", x=100, y=100, width=107, height=48),
                    ParkingSpace(id="TEST_2", x=220, y=100, width=107, height=48),
                    ParkingSpace(id="TEST_3", x=340, y=100, width=107, height=48),
                    ParkingSpace(id="TEST_4", x=100, y=160, width=107, height=48),
                    ParkingSpace(id="TEST_5", x=220, y=160, width=107, height=48),
                ]
                
                # Cargar los espacios directamente
                app.spaces = test_spaces
                print(f"‚úÖ Espacios de prueba cargados: {len(test_spaces)}")
                
                # Forzar actualizaci√≥n de todos los displays
                app.force_update_all_displays()
                
                # Actualizar status
                app.status_var.set(f"üß™ Espacios de prueba cargados: {len(test_spaces)}")
                
                print("‚úÖ Actualizaci√≥n de canvas completada")
                
                # Verificar que los espacios se visualizan
                root.after(1000, verify_canvas_display)
                
            except Exception as e:
                print(f"‚ùå Error simulando carga de espacios: {e}")
                messagebox.showerror("Error", f"Error en prueba: {e}")
        
        def verify_canvas_display():
            """Verifica que los espacios se muestren en el canvas"""
            try:
                # Verificar que hay espacios cargados
                if len(app.spaces) > 0:
                    print(f"‚úÖ Verificaci√≥n: {len(app.spaces)} espacios en memoria")
                    
                    # Verificar que el canvas del editor existe
                    if hasattr(app, 'editor_canvas') and app.editor_canvas is not None:
                        print("‚úÖ Canvas del editor est√° disponible")
                        
                        # Verificar que hay elementos dibujados en el canvas
                        canvas_items = app.editor_canvas.find_all()
                        print(f"‚úÖ Elementos en canvas: {len(canvas_items)}")
                        
                        if len(canvas_items) > 0:
                            print("üéâ ¬°√âXITO! Los espacios se visualizan autom√°ticamente en el canvas")
                            messagebox.showinfo("√âxito", 
                                "‚úÖ Los espacios se cargan y visualizan autom√°ticamente\n" +
                                f"Espacios cargados: {len(app.spaces)}\n" +
                                f"Elementos en canvas: {len(canvas_items)}")
                        else:
                            print("‚ö†Ô∏è  Canvas vac√≠o despu√©s de cargar espacios")
                            messagebox.showwarning("Advertencia", 
                                "Los espacios se cargaron pero no se visualizan autom√°ticamente")
                    else:
                        print("‚ùå Canvas del editor no disponible")
                        messagebox.showerror("Error", "Canvas del editor no est√° disponible")
                else:
                    print("‚ùå No hay espacios cargados")
                    messagebox.showerror("Error", "No se cargaron espacios de prueba")
                    
            except Exception as e:
                print(f"‚ùå Error en verificaci√≥n: {e}")
                messagebox.showerror("Error", f"Error en verificaci√≥n: {e}")
        
        # Programar la simulaci√≥n de carga despu√©s de 3 segundos
        root.after(3000, simulate_load_spaces)
        
        # Mostrar informaci√≥n inicial
        print("üß™ Iniciando prueba de actualizaci√≥n autom√°tica del canvas...")
        print("‚è≥ La prueba iniciar√° en 3 segundos...")
        print("üìã Instrucciones:")
        print("   1. Se cargar√°n 5 espacios de prueba autom√°ticamente")
        print("   2. El canvas del editor deber√≠a actualizarse inmediatamente")
        print("   3. Se mostrar√° un mensaje con el resultado")
        
        # Iniciar la aplicaci√≥n
        root.mainloop()
        
    except Exception as e:
        print(f"‚ùå Error iniciando prueba: {e}")
        messagebox.showerror("Error", f"Error iniciando aplicaci√≥n: {e}")
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("üß™ PRUEBA: Actualizaci√≥n Autom√°tica del Canvas del Editor")
    print("=" * 60)
    
    test_automatic_canvas_update()
    
    print("=" * 60)
    print("üèÅ Prueba completada")
    print("=" * 60)
